#include<bits/stdc++.h>
using namespace std;
int p4[5],p8[9],p10[11],IP[9],EP[9],InvIP[9];

int s0[4][4],s1[4][4];

string permutation(string str,int p[],int n)
{
    string keyP="";
    for(int i=1;i<=n;i++)
    {
        keyP+=str[p[i]-1];
    }
     return keyP;  
}

string leftShift(string str)
{
    int n=str.size();
    string ls=""; 
    for(int i=1;i<n;i++)ls+=str[i];
    ls+=str[0];
    return ls;
}

pair<string,string> subkeyGeneration(string key)
{
    string k1,k2;
    string keyp10=permutation(key,p10,10);
    string ls1="",ls2="";
    for(int i=1;i<=10;i++)
    {
        if(i<=5) ls1+=keyp10[i-1];
        else ls2+=keyp10[i-1];   
    }

    //for k1 generation
    ls1=leftShift(ls1);
    ls2=leftShift(ls2);

    k1=permutation(ls1+ls2,p8,8);
    //for k2 generation
    ls1=leftShift(ls1);
    ls2=leftShift(ls2);

    ls1=leftShift(ls1);
    ls2=leftShift(ls2);
    
    k2=permutation(ls1+ls2,p8,8);

    return {k1,k2};
}

string XOR(string s,string t)
{
    string res="";
    for(int i=0;i<s.size();i++)
    {
        if(s[i]==t[i]) res+='0';
        else res+='1';
    }
    return res;
}

int getInt(char x,char y)
{
    int res=0;
    if(x=='1') res+=2;
    if(y=='1') res+=1;
    return res;
}

string process(string l,string r,string k)
{
    string text_EP=permutation(r,EP,8);
   // cout<<text_EP<<endl;
    text_EP=XOR(text_EP,k);
    //cout<<text_EP<<endl;
    int row=getInt(text_EP[0],text_EP[3]);
     int col=getInt(text_EP[1],text_EP[2]);

      string  S= bitset<2>(s0[row][col]).to_string();

     row=getInt(text_EP[4],text_EP[7]);
     col=getInt(text_EP[5],text_EP[6]);
     S+=bitset<2>(s1[row][col]).to_string();

     //cout<<S<<endl;
     S=permutation(S,p4,4);
     S=XOR(S,l);
     return S;
}

string encryption(string plainText,string k1,string k2)
{
    string IP_plainText=permutation(plainText,IP,8);
    // cout<<IP_plainText<<endl;
    string l_plainText="",r_plainText=""; 
    for(int i=1;i<=8;i++)
    {
        if(i<=4) l_plainText+=IP_plainText[i-1];
        else r_plainText+=IP_plainText[i-1];   
    }
   // cout<<l_plainText<<" "<<r_plainText<<endl;
    l_plainText =process(l_plainText,r_plainText,k1);

    swap(l_plainText,r_plainText);
  // cout<<l_plainText<<" "<<r_plainText<<endl;

    l_plainText =process(l_plainText,r_plainText,k2);
    
    string Cipher=permutation(l_plainText+r_plainText,InvIP,8);
    return Cipher;
}

int main()
{
    string key,plainText;
    cout<<"Enter The Key: "; 
    cin>>key;


   cout<<"Enter the permutation p10 : ";
    for(int i=1;i<=10;i++) cin>>p10[i];

    cout<<"Enter the permutation p8 : ";
    for(int i=1;i<=8;i++) cin>>p8[i];

    pair<string,string>subkey=subkeyGeneration(key);
    cout<<"Enter the initial permutation: "; 
    for(int i=1;i<=8;i++) cin>>IP[i];

    //calculate IP-1
    for(int i=1;i<=8;i++)
    {
        InvIP[IP[i]]=i;
    }

    cout<<"Enter the expanded permutation: "; 
    for(int i=1;i<=8;i++) cin>>EP[i];
    
    cout<<"Enter Substitution Box, S0: ";
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            cin>>s0[i][j];
        }
    }

    cout<<"Enter Substitution Box, S1: ";
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            cin>>s1[i][j];
        }
    }

    cout<<"Enter the permutation p4 : ";
    for(int i=1;i<=4;i++) cin>>p4[i];
    cout<<"Enter plainText: ";
    cin>>plainText;

    string Cipher_text=encryption(plainText,subkey.first,subkey.second);
    cout<<endl<<"k1: "<< subkey.first<<endl<<"k2: "<<subkey.second<<endl;
    cout<<"Plain Text : "<<plainText<<endl;
    cout<<"Chipher Text: " <<Cipher_text<<endl;

    //Decription 

    string Decripted_text=encryption(Cipher_text,subkey.second,subkey.first);
    cout<<"Decripted Text: "<<Decripted_text<<endl;

    return 0;
}
